#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>
#include <sudo.h>
#include <githubV3.2>

#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
controller Controller1 = controller(primary);
motor RoboticArm1_mJ1 = motor(PORT1, ratio18_1, false);
motor RoboticArm1_mJ2 = motor(PORT2, ratio18_1, true);
motor RoboticArm1_mJ3 = motor(PORT3, ratio18_1, false);
motor RoboticArm1_mJ4 = motor(PORT4, ratio18_1, false);
pot RoboticArm1_mJ1_pot = pot(Brain.ThreeWirePort.A);
pot RoboticArm1_mJ2_pot = pot(Brain.ThreeWirePort.B);
pot RoboticArm1_mJ3_pot = pot(Brain.ThreeWirePort.C);
pot RoboticArm1_mJ4_pot = pot(Brain.ThreeWirePort.D);
RoboticArm RoboticArm1 = RoboticArm(RoboticArm1_mJ1, RoboticArm1_mJ1_pot, RoboticArm1_mJ2, RoboticArm1_mJ2_pot, RoboticArm1_mJ3, RoboticArm1_mJ3_pot, RoboticArm1_mJ4, RoboticArm1_mJ4_pot);

motor RoboticArm5_mJ1 = motor(PORT5, ratio18_1, false);
motor RoboticArm5_mJ2 = motor(PORT6, ratio18_1, true);
motor RoboticArm5_mJ3 = motor(PORT7, ratio18_1, false);
motor RoboticArm5_mJ4 = motor(PORT8, ratio18_1, false);
pot RoboticArm5_mJ1_pot = pot(Brain.ThreeWirePort.E);
pot RoboticArm5_mJ2_pot = pot(Brain.ThreeWirePort.F);
pot RoboticArm5_mJ3_pot = pot(Brain.ThreeWirePort.G);
pot RoboticArm5_mJ4_pot = pot(Brain.ThreeWirePort.H);
RoboticArm RoboticArm5 = RoboticArm(RoboticArm5_mJ1, RoboticArm5_mJ1_pot, RoboticArm5_mJ2, RoboticArm5_mJ2_pot, RoboticArm5_mJ3, RoboticArm5_mJ3_pot, RoboticArm5_mJ4, RoboticArm5_mJ4_pot);

motor leftMotorA = motor(PORT14, ratio6_1, false);
motor leftMotorB = motor(PORT13, ratio6_1, false);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);
motor rightMotorA = motor(PORT12, ratio6_1, true);
motor rightMotorB = motor(PORT10, ratio6_1, true);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);
gps DrivetrainGPS = gps(PORT11, 0.00, 0.00, mm, 180);
smartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGPS, 200, 320, 40, mm, 0.07692307692307693);

gps GPS9 = gps(PORT9, 1.00, 76.20, mm, 360);
inertial Inertial18 = inertial(PORT18);

controller Controller2 = controller(partner);
motor Motor17 = motor(PORT17, ratio36_1, true);

motor Motor19 = motor(PORT19, ratio18_1, false);

motor Motor20 = motor(PORT20, ratio18_1, false);

motor Motor16 = motor(PORT16, ratio18_1, false);

motor Motor15 = motor(PORT15, ratio18_1, false);

/*vex-vision-config:begin*/
vision Vision21 = vision (PORT21, 50);
/*vex-vision-config:end*/

bool vexcode_initial_drivetrain_calibration_completed = false;
void calibrateDrivetrain() {
  wait(200, msec);
  Brain.Screen.print("Calibrating");
  Brain.Screen.newLine();
  Brain.Screen.print("GPS");
  DrivetrainGPS.calibrate();
  while (DrivetrainGPS.isCalibrating()) {
    wait(25, msec);
  }
  vexcode_initial_drivetrain_calibration_completed = true;
  // Clears the screen and returns the cursor to row 1, column 1.
  Brain.Screen.clearScreen();
  Brain.Screen.setCursor(1, 1);
}

// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;
// define variables used for controlling motors based on controller inputs
bool Controller1LeftShoulderControlMotorsStopped = true;
bool Controller1RightShoulderControlMotorsStopped = true;
bool Controller1UpDownButtonsControlMotorsStopped = true;
bool Controller1XBButtonsControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller1 = true;
bool DrivetrainRNeedsToBeStopped_Controller1 = true;

// define a task that will handle monitoring inputs from Controller1
int rc_auto_loop_function_Controller1() {
  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      // stop the motors if the brain is calibrating
      if (DrivetrainGPS.isCalibrating()) {
        LeftDriveSmart.stop();
        RightDriveSmart.stop();
        while (DrivetrainGPS.isCalibrating()) {
          wait(25, msec);
        }
      }
      
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = Axis3 + Axis1
      // right = Axis3 - Axis1
      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();
      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();
      
      // check if the value is inside of the deadband range
      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {
        // check if the left motor has already been stopped
        if (DrivetrainLNeedsToBeStopped_Controller1) {
          // stop the left drive motor
          LeftDriveSmart.stop();
          // tell the code that the left motor has been stopped
          DrivetrainLNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range
        DrivetrainLNeedsToBeStopped_Controller1 = true;
      }
      // check if the value is inside of the deadband range
      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {
        // check if the right motor has already been stopped
        if (DrivetrainRNeedsToBeStopped_Controller1) {
          // stop the right drive motor
          RightDriveSmart.stop();
          // tell the code that the right motor has been stopped
          DrivetrainRNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range
        DrivetrainRNeedsToBeStopped_Controller1 = true;
      }
      
      // only tell the left drive motor to spin if the values are not in the deadband range
      if (DrivetrainLNeedsToBeStopped_Controller1) {
        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
        LeftDriveSmart.spin(forward);
      }
      // only tell the right drive motor to spin if the values are not in the deadband range
      if (DrivetrainRNeedsToBeStopped_Controller1) {
        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
        RightDriveSmart.spin(forward);
      }
      // check the ButtonL1/ButtonL2 status to control Motor17
      if (Controller1.ButtonL1.pressing()) {
        Motor17.spin(forward);
        Controller1LeftShoulderControlMotorsStopped = false;
      } else if (Controller1.ButtonL2.pressing()) {
        Motor17.spin(reverse);
        Controller1LeftShoulderControlMotorsStopped = false;
      } else if (!Controller1LeftShoulderControlMotorsStopped) {
        Motor17.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1LeftShoulderControlMotorsStopped = true;
      }
      // check the ButtonR1/ButtonR2 status to control Motor20
      if (Controller1.ButtonR1.pressing()) {
        Motor20.spin(forward);
        Controller1RightShoulderControlMotorsStopped = false;
      } else if (Controller1.ButtonR2.pressing()) {
        Motor20.spin(reverse);
        Controller1RightShoulderControlMotorsStopped = false;
      } else if (!Controller1RightShoulderControlMotorsStopped) {
        Motor20.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1RightShoulderControlMotorsStopped = true;
      }
      // check the ButtonUp/ButtonDown status to control Motor19
      if (Controller1.ButtonUp.pressing()) {
        Motor19.spin(forward);
        Controller1UpDownButtonsControlMotorsStopped = false;
      } else if (Controller1.ButtonDown.pressing()) {
        Motor19.spin(reverse);
        Controller1UpDownButtonsControlMotorsStopped = false;
      } else if (!Controller1UpDownButtonsControlMotorsStopped) {
        Motor19.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1UpDownButtonsControlMotorsStopped = true;
      }
      // check the ButtonX/ButtonB status to control Motor16
      if (Controller1.ButtonX.pressing()) {
        Motor16.spin(forward);
        Controller1XBButtonsControlMotorsStopped = false;
      } else if (Controller1.ButtonB.pressing()) {
        Motor16.spin(reverse);
        Controller1XBButtonsControlMotorsStopped = false;
      } else if (!Controller1XBButtonsControlMotorsStopped) {
        Motor16.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1XBButtonsControlMotorsStopped = true;
      }
    }
    // wait before repeating the process
    wait(20, msec);
  }
  return 0;
}

// define variables used for controlling motors based on controller inputs
bool Controller2LeftShoulderControlMotorsStopped = true;
bool Controller2RightShoulderControlMotorsStopped = true;
bool Controller2UpDownButtonsControlMotorsStopped = true;
bool Controller2XBButtonsControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller2 = true;
bool DrivetrainRNeedsToBeStopped_Controller2 = true;

// define a task that will handle monitoring inputs from Controller2
int rc_auto_loop_function_Controller2() {
  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      // stop the motors if the brain is calibrating
      if (DrivetrainGPS.isCalibrating()) {
        LeftDriveSmart.stop();
        RightDriveSmart.stop();
        while (DrivetrainGPS.isCalibrating()) {
          wait(25, msec);
        }
      }
      
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = Axis2 + Axis4
      // right = Axis2 - Axis4
      int drivetrainLeftSideSpeed = Controller2.Axis2.position() + Controller2.Axis4.position();
      int drivetrainRightSideSpeed = Controller2.Axis2.position() - Controller2.Axis4.position();
      
      // check if the value is inside of the deadband range
      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {
        // check if the left motor has already been stopped
        if (DrivetrainLNeedsToBeStopped_Controller2) {
          // stop the left drive motor
          LeftDriveSmart.stop();
          // tell the code that the left motor has been stopped
          DrivetrainLNeedsToBeStopped_Controller2 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range
        DrivetrainLNeedsToBeStopped_Controller2 = true;
      }
      // check if the value is inside of the deadband range
      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {
        // check if the right motor has already been stopped
        if (DrivetrainRNeedsToBeStopped_Controller2) {
          // stop the right drive motor
          RightDriveSmart.stop();
          // tell the code that the right motor has been stopped
          DrivetrainRNeedsToBeStopped_Controller2 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range
        DrivetrainRNeedsToBeStopped_Controller2 = true;
      }
      
      // only tell the left drive motor to spin if the values are not in the deadband range
      if (DrivetrainLNeedsToBeStopped_Controller2) {
        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
        LeftDriveSmart.spin(forward);
      }
      // only tell the right drive motor to spin if the values are not in the deadband range
      if (DrivetrainRNeedsToBeStopped_Controller2) {
        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
        RightDriveSmart.spin(forward);
      }
      // check the ButtonL1/ButtonL2 status to control Motor20
      if (Controller2.ButtonL1.pressing()) {
        Motor20.spin(forward);
        Controller2LeftShoulderControlMotorsStopped = false;
      } else if (Controller2.ButtonL2.pressing()) {
        Motor20.spin(reverse);
        Controller2LeftShoulderControlMotorsStopped = false;
      } else if (!Controller2LeftShoulderControlMotorsStopped) {
        Motor20.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller2LeftShoulderControlMotorsStopped = true;
      }
      // check the ButtonR1/ButtonR2 status to control Motor17
      if (Controller2.ButtonR1.pressing()) {
        Motor17.spin(forward);
        Controller2RightShoulderControlMotorsStopped = false;
      } else if (Controller2.ButtonR2.pressing()) {
        Motor17.spin(reverse);
        Controller2RightShoulderControlMotorsStopped = false;
      } else if (!Controller2RightShoulderControlMotorsStopped) {
        Motor17.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller2RightShoulderControlMotorsStopped = true;
      }
      // check the ButtonUp/ButtonDown status to control Motor15
      if (Controller2.ButtonUp.pressing()) {
        Motor15.spin(forward);
        Controller2UpDownButtonsControlMotorsStopped = false;
      } else if (Controller2.ButtonDown.pressing()) {
        Motor15.spin(reverse);
        Controller2UpDownButtonsControlMotorsStopped = false;
      } else if (!Controller2UpDownButtonsControlMotorsStopped) {
        Motor15.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller2UpDownButtonsControlMotorsStopped = true;
      }
      // check the ButtonX/ButtonB status to control Motor16
      if (Controller2.ButtonX.pressing()) {
        Motor16.spin(forward);
        Controller2XBButtonsControlMotorsStopped = false;
      } else if (Controller2.ButtonB.pressing()) {
        Motor16.spin(reverse);
        Controller2XBButtonsControlMotorsStopped = false;
      } else if (!Controller2XBButtonsControlMotorsStopped) {
        Motor16.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller2XBButtonsControlMotorsStopped = true;
      }
    }
    // wait before repeating the process
    wait(20, msec);
  }
  return 0;
}

task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);
task rc_auto_loop_task_Controller2(rc_auto_loop_function_Controller2);

#pragma endregion VEXcode Generated Robot Configuration
#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


controller Controller1 = controller(primary);
motor RoboticArm1_mJ1 = motor(PORT1, ratio18_1, false);
motor RoboticArm1_mJ2 = motor(PORT2, ratio18_1, true);
motor RoboticArm1_mJ3 = motor(PORT3, ratio18_1, false);
motor RoboticArm1_mJ4 = motor(PORT4, ratio18_1, false);
pot RoboticArm1_mJ1_pot = pot(Brain.ThreeWirePort.A);
pot RoboticArm1_mJ2_pot = pot(Brain.ThreeWirePort.B);
pot RoboticArm1_mJ3_pot = pot(Brain.ThreeWirePort.C);
pot RoboticArm1_mJ4_pot = pot(Brain.ThreeWirePort.D);
RoboticArm RoboticArm1 = RoboticArm(RoboticArm1_mJ1, RoboticArm1_mJ1_pot, RoboticArm1_mJ2, RoboticArm1_mJ2_pot, RoboticArm1_mJ3, RoboticArm1_mJ3_pot, RoboticArm1_mJ4, RoboticArm1_mJ4_pot);

motor RoboticArm5_mJ1 = motor(PORT5, ratio18_1, false);
motor RoboticArm5_mJ2 = motor(PORT6, ratio18_1, true);
motor RoboticArm5_mJ3 = motor(PORT7, ratio18_1, false);
motor RoboticArm5_mJ4 = motor(PORT8, ratio18_1, false);
pot RoboticArm5_mJ1_pot = pot(Brain.ThreeWirePort.E);
pot RoboticArm5_mJ2_pot = pot(Brain.ThreeWirePort.F);
pot RoboticArm5_mJ3_pot = pot(Brain.ThreeWirePort.G);
pot RoboticArm5_mJ4_pot = pot(Brain.ThreeWirePort.H);
RoboticArm RoboticArm5 = RoboticArm(RoboticArm5_mJ1, RoboticArm5_mJ1_pot, RoboticArm5_mJ2, RoboticArm5_mJ2_pot, RoboticArm5_mJ3, RoboticArm5_mJ3_pot, RoboticArm5_mJ4, RoboticArm5_mJ4_pot);

motor leftMotorA = motor(PORT14, ratio6_1, false);
motor leftMotorB = motor(PORT13, ratio6_1, false);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);
motor rightMotorA = motor(PORT12, ratio6_1, true);
motor rightMotorB = motor(PORT10, ratio6_1, true);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);
gps DrivetrainGPS = gps(PORT11, 0.00, 0.00, mm, 180);
smartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGPS, 200, 320, 40, mm, 0.07692307692307693);

gps GPS9 = gps(PORT9, 1.00, 76.20, mm, 360);
inertial Inertial18 = inertial(PORT18);

controller Controller2 = controller(partner);
motor Motor17 = motor(PORT17, ratio36_1, true);

motor Motor19 = motor(PORT19, ratio18_1, false);

motor Motor20 = motor(PORT20, ratio18_1, false);

motor Motor16 = motor(PORT16, ratio18_1, false);

motor Motor15 = motor(PORT15, ratio18_1, false);

/*vex-vision-config:begin*/
vision Vision21 = vision (PORT21, 50);
/*vex-vision-config:end*/

bool vexcode_initial_drivetrain_calibration_completed = false;
void calibrateDrivetrain() {
  wait(200, msec);
  Brain.Screen.print("Calibrating");
  Brain.Screen.newLine();
  Brain.Screen.print("GPS");
  DrivetrainGPS.calibrate();
  while (DrivetrainGPS.isCalibrating()) {
    wait(25, msec);
  }
  vexcode_initial_drivetrain_calibration_completed = true;
  // Clears the screen and returns the cursor to row 1, column 1.
  Brain.Screen.clearScreen();
  Brain.Screen.setCursor(1, 1);
}

// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;
// define variables used for controlling motors based on controller inputs
bool Controller1LeftShoulderControlMotorsStopped = true;
bool Controller1RightShoulderControlMotorsStopped = true;
bool Controller1UpDownButtonsControlMotorsStopped = true;
bool Controller1XBButtonsControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller1 = true;
bool DrivetrainRNeedsToBeStopped_Controller1 = true;

// define a task that will handle monitoring inputs from Controller1
int rc_auto_loop_function_Controller1() {
  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      // stop the motors if the brain is calibrating
      if (DrivetrainGPS.isCalibrating()) {
        LeftDriveSmart.stop();
        RightDriveSmart.stop();
        while (DrivetrainGPS.isCalibrating()) {
          wait(25, msec);
        }
      }
      
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = Axis3 + Axis1
      // right = Axis3 - Axis1
      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();
      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();
      
      // check if the value is inside of the deadband range
      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {
        // check if the left motor has already been stopped
        if (DrivetrainLNeedsToBeStopped_Controller1) {
          // stop the left drive motor
          LeftDriveSmart.stop();
          // tell the code that the left motor has been stopped
          DrivetrainLNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range
        DrivetrainLNeedsToBeStopped_Controller1 = true;
      }
      // check if the value is inside of the deadband range
      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {
        // check if the right motor has already been stopped
        if (DrivetrainRNeedsToBeStopped_Controller1) {
          // stop the right drive motor
          RightDriveSmart.stop();
          // tell the code that the right motor has been stopped
          DrivetrainRNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range
        DrivetrainRNeedsToBeStopped_Controller1 = true;
      }
      
      // only tell the left drive motor to spin if the values are not in the deadband range
      if (DrivetrainLNeedsToBeStopped_Controller1) {
        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
        LeftDriveSmart.spin(forward);
      }
      // only tell the right drive motor to spin if the values are not in the deadband range
      if (DrivetrainRNeedsToBeStopped_Controller1) {
        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
        RightDriveSmart.spin(forward);
      }
      // check the ButtonL1/ButtonL2 status to control Motor17
      if (Controller1.ButtonL1.pressing()) {
        Motor17.spin(forward);
        Controller1LeftShoulderControlMotorsStopped = false;
      } else if (Controller1.ButtonL2.pressing()) {
        Motor17.spin(reverse);
        Controller1LeftShoulderControlMotorsStopped = false;
      } else if (!Controller1LeftShoulderControlMotorsStopped) {
        Motor17.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1LeftShoulderControlMotorsStopped = true;
      }
      // check the ButtonR1/ButtonR2 status to control Motor20
      if (Controller1.ButtonR1.pressing()) {
        Motor20.spin(forward);
        Controller1RightShoulderControlMotorsStopped = false;
      } else if (Controller1.ButtonR2.pressing()) {
        Motor20.spin(reverse);
        Controller1RightShoulderControlMotorsStopped = false;
      } else if (!Controller1RightShoulderControlMotorsStopped) {
        Motor20.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1RightShoulderControlMotorsStopped = true;
      }
      // check the ButtonUp/ButtonDown status to control Motor19
      if (Controller1.ButtonUp.pressing()) {
        Motor19.spin(forward);
        Controller1UpDownButtonsControlMotorsStopped = false;
      } else if (Controller1.ButtonDown.pressing()) {
        Motor19.spin(reverse);
        Controller1UpDownButtonsControlMotorsStopped = false;
      } else if (!Controller1UpDownButtonsControlMotorsStopped) {
        Motor19.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1UpDownButtonsControlMotorsStopped = true;
      }
      // check the ButtonX/ButtonB status to control Motor16
      if (Controller1.ButtonX.pressing()) {
        Motor16.spin(forward);
        Controller1XBButtonsControlMotorsStopped = false;
      } else if (Controller1.ButtonB.pressing()) {
        Motor16.spin(reverse);
        Controller1XBButtonsControlMotorsStopped = false;
      } else if (!Controller1XBButtonsControlMotorsStopped) {
        Motor16.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1XBButtonsControlMotorsStopped = true;
      }
    }
    // wait before repeating the process
    wait(20, msec);
  }
  return 0;
}

// define variables used for controlling motors based on controller inputs
bool Controller2LeftShoulderControlMotorsStopped = true;
bool Controller2RightShoulderControlMotorsStopped = true;
bool Controller2UpDownButtonsControlMotorsStopped = true;
bool Controller2XBButtonsControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller2 = true;
bool DrivetrainRNeedsToBeStopped_Controller2 = true;

// define a task that will handle monitoring inputs from Controller2
int rc_auto_loop_function_Controller2() {
  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      // stop the motors if the brain is calibrating
      if (DrivetrainGPS.isCalibrating()) {
        LeftDriveSmart.stop();
        RightDriveSmart.stop();
        while (DrivetrainGPS.isCalibrating()) {
          wait(25, msec);
        }
      }
      
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = Axis2 + Axis4
      // right = Axis2 - Axis4
      int drivetrainLeftSideSpeed = Controller2.Axis2.position() + Controller2.Axis4.position();
      int drivetrainRightSideSpeed = Controller2.Axis2.position() - Controller2.Axis4.position();
      
      // check if the value is inside of the deadband range
      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {
        // check if the left motor has already been stopped
        if (DrivetrainLNeedsToBeStopped_Controller2) {
          // stop the left drive motor
          LeftDriveSmart.stop();
          // tell the code that the left motor has been stopped
          DrivetrainLNeedsToBeStopped_Controller2 = false;
        }
      } else {
        
        DrivetrainLNeedsToBeStopped_Controller2 = true;
      }
      // check if the value is inside of the deadband range
      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {
        // check if the right motor has already been stopped
        if (DrivetrainRNeedsToBeStopped_Controller2) {
          // stop the right drive motor
          RightDriveSmart.stop();
          // tell the code that the right motor has been stopped
          DrivetrainRNeedsToBeStopped_Controller2 = false;
        }
      } else {
       
        DrivetrainRNeedsToBeStopped_Controller2 = true;
      }
      
    
      if (DrivetrainLNeedsToBeStopped_Controller2) {
        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
        LeftDriveSmart.spin(forward);
      }
     
      if (DrivetrainRNeedsToBeStopped_Controller2) {
        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
        RightDriveSmart.spin(forward);
      }
      
      if (Controller2.ButtonL1.pressing()) {
        Motor20.spin(forward);
        Controller2LeftShoulderControlMotorsStopped = false;
      } else if (Controller2.ButtonL2.pressing()) {
        Motor20.spin(reverse);
        Controller2LeftShoulderControlMotorsStopped = false;
      } else if (!Controller2LeftShoulderControlMotorsStopped) {
        Motor20.stop();
       
        Controller2LeftShoulderControlMotorsStopped = true;
      }
      
      if (Controller2.ButtonR1.pressing()) {
        Motor17.spin(forward);
        Controller2RightShoulderControlMotorsStopped = false;
      } else if (Controller2.ButtonR2.pressing()) {
        Motor17.spin(reverse);
        Controller2RightShoulderControlMotorsStopped = false;
      } else if (!Controller2RightShoulderControlMotorsStopped) {
        Motor17.stop();
        
        Controller2RightShoulderControlMotorsStopped = true;
      }
  
      if (Controller2.ButtonUp.pressing()) {
        Motor15.spin(forward);
        Controller2UpDownButtonsControlMotorsStopped = false;
      } else if (Controller2.ButtonDown.pressing()) {
        Motor15.spin(reverse);
        Controller2UpDownButtonsControlMotorsStopped = false;
      } else if (!Controller2UpDownButtonsControlMotorsStopped) {
        Motor15.stop();
       
        Controller2UpDownButtonsControlMotorsStopped = true;
      }
 
      if (Controller2.ButtonX.pressing()) {
        Motor16.spin(forward);
        Controller2XBButtonsControlMotorsStopped = false;
      } else if (Controller2.ButtonB.pressing()) {
        Motor16.spin(reverse);
        Controller2XBButtonsControlMotorsStopped = false;
      } else if (!Controller2XBButtonsControlMotorsStopped) {
        Motor16.stop();
     
        Controller2XBButtonsControlMotorsStopped = true;
      }
    }
   ]
    wait(20, msec);
  }
  return 0;
}
controller Controller1 = controller(primary);
motor RoboticArm1_mJ1 = motor(PORT1, ratio18_1, false);
motor RoboticArm1_mJ2 = motor(PORT2, ratio18_1, true);
motor RoboticArm1_mJ3 = motor(PORT3, ratio18_1, false);
motor RoboticArm1_mJ4 = motor(PORT4, ratio18_1, false);
pot RoboticArm1_mJ1_pot = pot(Brain.ThreeWirePort.A);
pot RoboticArm1_mJ2_pot = pot(Brain.ThreeWirePort.B);
pot RoboticArm1_mJ3_pot = pot(Brain.ThreeWirePort.C);
pot RoboticArm1_mJ4_pot = pot(Brain.ThreeWirePort.D);
RoboticArm RoboticArm1 = RoboticArm(RoboticArm1_mJ1, RoboticArm1_mJ1_pot, RoboticArm1_mJ2, RoboticArm1_mJ2_pot, RoboticArm1_mJ3, RoboticArm1_mJ3_pot, RoboticArm1_mJ4, RoboticArm1_mJ4_pot);

motor RoboticArm5_mJ1 = motor(PORT5, ratio18_1, false);
motor RoboticArm5_mJ2 = motor(PORT6, ratio18_1, true);
motor RoboticArm5_mJ3 = motor(PORT7, ratio18_1, false);
motor RoboticArm5_mJ4 = motor(PORT8, ratio18_1, false);
pot RoboticArm5_mJ1_pot = pot(Brain.ThreeWirePort.E);
pot RoboticArm5_mJ2_pot = pot(Brain.ThreeWirePort.F);
pot RoboticArm5_mJ3_pot = pot(Brain.ThreeWirePort.G);
pot RoboticArm5_mJ4_pot = pot(Brain.ThreeWirePort.H);
RoboticArm RoboticArm5 = RoboticArm(RoboticArm5_mJ1, RoboticArm5_mJ1_pot, RoboticArm5_mJ2, RoboticArm5_mJ2_pot, RoboticArm5_mJ3, RoboticArm5_mJ3_pot, RoboticArm5_mJ4, RoboticArm5_mJ4_pot);

motor leftMotorA = motor(PORT14, ratio6_1, false);
motor leftMotorB = motor(PORT13, ratio6_1, false);
motor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);
motor rightMotorA = motor(PORT12, ratio6_1, true);
motor rightMotorB = motor(PORT10, ratio6_1, true);
motor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);
gps DrivetrainGPS = gps(PORT11, 0.00, 0.00, mm, 180);
smartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGPS, 200, 320, 40, mm, 0.07692307692307693);

gps GPS9 = gps(PORT9, 1.00, 76.20, mm, 360);
inertial Inertial18 = inertial(PORT18);

controller Controller2 = controller(partner);
motor Motor17 = motor(PORT17, ratio36_1, true);

motor Motor19 = motor(PORT19, ratio18_1, false);

motor Motor20 = motor(PORT20, ratio18_1, false);

motor Motor16 = motor(PORT16, ratio18_1, false);

motor Motor15 = motor(PORT15, ratio18_1, false);

/*vex-vision-config:begin*/
vision Vision21 = vision (PORT21, 50);
/*vex-vision-config:end*/

bool vexcode_initial_drivetrain_calibration_completed = false;
void calibrateDrivetrain() {
  wait(200, msec);
  Brain.Screen.print("Calibrating");
  Brain.Screen.newLine();
  Brain.Screen.print("GPS");
  DrivetrainGPS.calibrate();
  while (DrivetrainGPS.isCalibrating()) {
    wait(25, msec);
  }
  vexcode_initial_drivetrain_calibration_completed = true;
  // Clears the screen and returns the cursor to row 1, column 1.
  Brain.Screen.clearScreen();
  Brain.Screen.setCursor(1, 1);
}

// Helper to make playing sounds from the V5 in VEXcode easier and
// keeps the code cleaner by making it clear what is happening.
void playVexcodeSound(const char *soundName) {
  printf("VEXPlaySound:%s\n", soundName);
  wait(5, msec);
}



// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;
// define variables used for controlling motors based on controller inputs
bool Controller1LeftShoulderControlMotorsStopped = true;
bool Controller1RightShoulderControlMotorsStopped = true;
bool Controller1UpDownButtonsControlMotorsStopped = true;
bool Controller1XBButtonsControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller1 = true;
bool DrivetrainRNeedsToBeStopped_Controller1 = true;

// define a task that will handle monitoring inputs from Controller1
int rc_auto_loop_function_Controller1() {
  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      // stop the motors if the brain is calibrating
      if (DrivetrainGPS.isCalibrating()) {
        LeftDriveSmart.stop();
        RightDriveSmart.stop();
        while (DrivetrainGPS.isCalibrating()) {
          wait(25, msec);
        }
      }
      
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = Axis3 + Axis1
      // right = Axis3 - Axis1
      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();
      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();
      
      // check if the value is inside of the deadband range
      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {
        // check if the left motor has already been stopped
        if (DrivetrainLNeedsToBeStopped_Controller1) {
          // stop the left drive motor
          LeftDriveSmart.stop();
          // tell the code that the left motor has been stopped
          DrivetrainLNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range
        DrivetrainLNeedsToBeStopped_Controller1 = true;
      }
      // check if the value is inside of the deadband range
      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {
        // check if the right motor has already been stopped
        if (DrivetrainRNeedsToBeStopped_Controller1) {
          // stop the right drive motor
          RightDriveSmart.stop();
          // tell the code that the right motor has been stopped
          DrivetrainRNeedsToBeStopped_Controller1 = false;
        }
      } else {
        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range
        DrivetrainRNeedsToBeStopped_Controller1 = true;
      }
      
      // only tell the left drive motor to spin if the values are not in the deadband range
      if (DrivetrainLNeedsToBeStopped_Controller1) {
        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
        LeftDriveSmart.spin(forward);
      }
      // only tell the right drive motor to spin if the values are not in the deadband range
      if (DrivetrainRNeedsToBeStopped_Controller1) {
        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
        RightDriveSmart.spin(forward);
      }
      // check the ButtonL1/ButtonL2 status to control Motor17
      if (Controller1.ButtonL1.pressing()) {
        Motor17.spin(forward);
        Controller1LeftShoulderControlMotorsStopped = false;
      } else if (Controller1.ButtonL2.pressing()) {
        Motor17.spin(reverse);
        Controller1LeftShoulderControlMotorsStopped = false;
      } else if (!Controller1LeftShoulderControlMotorsStopped) {
        Motor17.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1LeftShoulderControlMotorsStopped = true;
      }
      // check the ButtonR1/ButtonR2 status to control Motor20
      if (Controller1.ButtonR1.pressing()) {
        Motor20.spin(forward);
        Controller1RightShoulderControlMotorsStopped = false;
      } else if (Controller1.ButtonR2.pressing()) {
        Motor20.spin(reverse);
        Controller1RightShoulderControlMotorsStopped = false;
      } else if (!Controller1RightShoulderControlMotorsStopped) {
        Motor20.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1RightShoulderControlMotorsStopped = true;
      }
      // check the ButtonUp/ButtonDown status to control Motor19
      if (Controller1.ButtonUp.pressing()) {
        Motor19.spin(forward);
        Controller1UpDownButtonsControlMotorsStopped = false;
      } else if (Controller1.ButtonDown.pressing()) {
        Motor19.spin(reverse);
        Controller1UpDownButtonsControlMotorsStopped = false;
      } else if (!Controller1UpDownButtonsControlMotorsStopped) {
        Motor19.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1UpDownButtonsControlMotorsStopped = true;
      }
      // check the ButtonX/ButtonB status to control Motor16
      if (Controller1.ButtonX.pressing()) {
        Motor16.spin(forward);
        Controller1XBButtonsControlMotorsStopped = false;
      } else if (Controller1.ButtonB.pressing()) {
        Motor16.spin(reverse);
        Controller1XBButtonsControlMotorsStopped = false;
      } else if (!Controller1XBButtonsControlMotorsStopped) {
        Motor16.stop();
        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released
        Controller1XBButtonsControlMotorsStopped = true;
      }
    }
    // wait before repeating the process
    wait(20, msec);
  }
  return 0;
}

// define variables used for controlling motors based on controller inputs
bool Controller2LeftShoulderControlMotorsStopped = true;
bool Controller2RightShoulderControlMotorsStopped = true;
bool Controller2UpDownButtonsControlMotorsStopped = true;
bool Controller2XBButtonsControlMotorsStopped = true;
bool DrivetrainLNeedsToBeStopped_Controller2 = true;
bool DrivetrainRNeedsToBeStopped_Controller2 = true;

// define a task that will handle monitoring inputs from Controller2
int rc_auto_loop_function_Controller2() {
  // process the controller input every 20 milliseconds
  // update the motors based on the input values
  while(true) {
    if(RemoteControlCodeEnabled) {
      // stop the motors if the brain is calibrating
      if (DrivetrainGPS.isCalibrating()) {
        LeftDriveSmart.stop();
        RightDriveSmart.stop();
        while (DrivetrainGPS.isCalibrating()) {
          wait(25, msec);
        }
      }
      
      // calculate the drivetrain motor velocities from the controller joystick axies
      // left = Axis2 + Axis4
      // right = Axis2 - Axis4
      int drivetrainLeftSideSpeed = Controller2.Axis2.position() + Controller2.Axis4.position();
      int drivetrainRightSideSpeed = Controller2.Axis2.position() - Controller2.Axis4.position();
      
      // check if the value is inside of the deadband range
      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {
        // check if the left motor has already been stopped
        if (DrivetrainLNeedsToBeStopped_Controller2) {
          // stop the left drive motor
          LeftDriveSmart.stop();
          // tell the code that the left motor has been stopped
          DrivetrainLNeedsToBeStopped_Controller2 = false;
        }
      } else {
        
        DrivetrainLNeedsToBeStopped_Controller2 = true;
      }
      // check if the value is inside of the deadband range
      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {
        // check if the right motor has already been stopped
        if (DrivetrainRNeedsToBeStopped_Controller2) {
          // stop the right drive motor
          RightDriveSmart.stop();
          // tell the code that the right motor has been stopped
          DrivetrainRNeedsToBeStopped_Controller2 = false;
        }
      } else {
       
        DrivetrainRNeedsToBeStopped_Controller2 = true;
      }
      
    
      if (DrivetrainLNeedsToBeStopped_Controller2) {
        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);
        LeftDriveSmart.spin(forward);
      }
     
      if (DrivetrainRNeedsToBeStopped_Controller2) {
        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);
        RightDriveSmart.spin(forward);
      }
      
      if (Controller2.ButtonL1.pressing()) {
        Motor20.spin(forward);
        Controller2LeftShoulderControlMotorsStopped = false;
      } else if (Controller2.ButtonL2.pressing()) {
        Motor20.spin(reverse);
        Controller2LeftShoulderControlMotorsStopped = false;
      } else if (!Controller2LeftShoulderControlMotorsStopped) {
        Motor20.stop();
       
        Controller2LeftShoulderControlMotorsStopped = true;
      }
      
      if (Controller2.ButtonR1.pressing()) {
        Motor17.spin(forward);
        Controller2RightShoulderControlMotorsStopped = false;
      } else if (Controller2.ButtonR2.pressing()) {
        Motor17.spin(reverse);
        Controller2RightShoulderControlMotorsStopped = false;
      } else if (!Controller2RightShoulderControlMotorsStopped) {
        Motor17.stop();
        
        Controller2RightShoulderControlMotorsStopped = true;
      }
  
      if (Controller2.ButtonUp.pressing()) {
        Motor15.spin(forward);
        Controller2UpDownButtonsControlMotorsStopped = false;
      } else if (Controller2.ButtonDown.pressing()) {
        Motor15.spin(reverse);
        Controller2UpDownButtonsControlMotorsStopped = false;
      } else if (!Controller2UpDownButtonsControlMotorsStopped) {
        Motor15.stop();
       
        Controller2UpDownButtonsControlMotorsStopped = true;
      }
 
      if (Controller2.ButtonX.pressing()) {
        Motor16.spin(forward);
        Controller2XBButtonsControlMotorsStopped = false;
      } else if (Controller2.ButtonB.pressing()) {
        Motor16.spin(reverse);
        Controller2XBButtonsControlMotorsStopped = false;
      } else if (!Controller2XBButtonsControlMotorsStopped) {
        Motor16.stop();
     
        Controller2XBButtonsControlMotorsStopped = true;
      }
    }
   ]
    wait(20, msec);
  }
  return 0;
}

